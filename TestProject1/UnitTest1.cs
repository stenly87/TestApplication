using TestApplication;

namespace TestProject1
{
    public class Tests
    {
        TestMe testMe;
        [SetUp]
        public void Setup()
        {
            testMe = new TestMe();
        }

        // правила хорошего теста
        // 1) соблюдение структуры ААА
        // 2) тест должен быть кратким и понятным, он должен тестировать
        // только одно какое-то поведение за раз
        // 3) существуют разные мнения по поводу наименования тестируемых методов
        // например шаблон: функция_аргумент_ожидаемый_результат
        // 4) тестируемый код должен быть сформирован таким образом
        // чтобы имелась возможность убрать или заменить максимум
        // зависимостей
        // 5) если нет подходящего метода в классах Assert для 
        // проверки результата можно написать условие самому
        // и выполнить Assert.Pass или Assert.Fail
        // 6) Нет смысла тестировать бд
        // 7) работу самого api (http взаимодействие) тоже нет 
        // особого смысла проверять. Исключения - авторизация, токены
        // 8) юнит-тесты, интеграционные тесты
        // юнит-тесты тестируют одно конкретное действие
        // интеграционные тесты тестируют взаимодействие модулей
        // 9) если есть в коде зависимости, то при покрытии тестами
        // нашего кода есть смысл в использовании заглушек для зависимостей
        // два типа заглушек: stub и mock
        // при использовании stub, мы тестируем состояние объекта, использующего этот stub
        // при использовании mock, мы тестируем состояние mock, использующегося в объекте
        // заглушка это реализация интерфейса, которая предполагает
        // например возврат предопределенных значений или реализацию 
        // методов в тесте с определенным результатом

        [Test]
        public void TestMe_Object_Properties_Not_Null()
        {
            // AAA 
            // Arange - подготовка тестируемых объектов
            
            // Act - выполнение тестируемой функции, получение результата
            
            // Assert - сравнение полученного результата с ожидаемым
            Assert.NotNull(testMe.SomeValue);
        }

        // технология TDD - разработка через тестирование
        // порядок работы:
        // 1) пишем тест для новую функции, которой еще не существует
        // 2) реализуем функциональность до тех пор, пока проект не 
        // начнет компилироваться
        // 3) меняем функциональность до тех пор, пока тест не начнет
        // выполняться (проходить успешно)

        [Test]
        public void TestMe_ChangeValue_Set_StateObject_To_IsEdit()
        {
            // arrange

            // act
            testMe.ChangeValue(10);
            // assert
            Assert.AreEqual(ObjectStates.IsEdit, testMe.State);
        }

        [Test]
        public void TestMe_Save_Set_StateObject_To_Normal()
        {
            testMe.SetUpDB(new IDB_Stub<TestMe>());
            testMe.ChangeValue(10);  

            testMe.Save();

            Assert.AreEqual(ObjectStates.Normal, testMe.State);
        }

        [Test]
        public void TestMe_Insert_IncrementCountRowsInDB()
        {
            var mock = new IDB_Mock<TestMe>();
            testMe.SetUpDB(mock);

            testMe.Insert();

            Assert.AreEqual(1, mock.Count());
        }
    }
}